// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: object_handler.proto

#include "object_handler.pb.h"
#include "object_handler.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* ObjectHandler_method_names[] = {
  "/ObjectHandler/initPlayer",
  "/ObjectHandler/getPlayers",
};

std::unique_ptr< ObjectHandler::Stub> ObjectHandler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ObjectHandler::Stub> stub(new ObjectHandler::Stub(channel));
  return stub;
}

ObjectHandler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_initPlayer_(ObjectHandler_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPlayers_(ObjectHandler_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ObjectHandler::Stub::initPlayer(::grpc::ClientContext* context, const ::PlayerParams& request, ::PlayerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_initPlayer_, context, request, response);
}

void ObjectHandler::Stub::experimental_async::initPlayer(::grpc::ClientContext* context, const ::PlayerParams* request, ::PlayerInfo* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_initPlayer_, context, request, response, std::move(f));
}

void ObjectHandler::Stub::experimental_async::initPlayer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PlayerInfo* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_initPlayer_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::PlayerInfo>* ObjectHandler::Stub::AsyncinitPlayerRaw(::grpc::ClientContext* context, const ::PlayerParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PlayerInfo>::Create(channel_.get(), cq, rpcmethod_initPlayer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PlayerInfo>* ObjectHandler::Stub::PrepareAsyncinitPlayerRaw(::grpc::ClientContext* context, const ::PlayerParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PlayerInfo>::Create(channel_.get(), cq, rpcmethod_initPlayer_, context, request, false);
}

::grpc::Status ObjectHandler::Stub::getPlayers(::grpc::ClientContext* context, const ::PlayerParams& request, ::Players* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getPlayers_, context, request, response);
}

void ObjectHandler::Stub::experimental_async::getPlayers(::grpc::ClientContext* context, const ::PlayerParams* request, ::Players* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getPlayers_, context, request, response, std::move(f));
}

void ObjectHandler::Stub::experimental_async::getPlayers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Players* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getPlayers_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Players>* ObjectHandler::Stub::AsyncgetPlayersRaw(::grpc::ClientContext* context, const ::PlayerParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Players>::Create(channel_.get(), cq, rpcmethod_getPlayers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Players>* ObjectHandler::Stub::PrepareAsyncgetPlayersRaw(::grpc::ClientContext* context, const ::PlayerParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Players>::Create(channel_.get(), cq, rpcmethod_getPlayers_, context, request, false);
}

ObjectHandler::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectHandler_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObjectHandler::Service, ::PlayerParams, ::PlayerInfo>(
          std::mem_fn(&ObjectHandler::Service::initPlayer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectHandler_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObjectHandler::Service, ::PlayerParams, ::Players>(
          std::mem_fn(&ObjectHandler::Service::getPlayers), this)));
}

ObjectHandler::Service::~Service() {
}

::grpc::Status ObjectHandler::Service::initPlayer(::grpc::ServerContext* context, const ::PlayerParams* request, ::PlayerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObjectHandler::Service::getPlayers(::grpc::ServerContext* context, const ::PlayerParams* request, ::Players* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


